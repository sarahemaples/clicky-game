{"ast":null,"code":"var _jsxFileName = \"/Users/sarahmaples/Desktop/bootcamp/homework/clicky-game/src/App.js\";\nimport React, { Component } from \"react\";\nimport FriendCard from \"./components/FriendCard\";\nimport Wrapper from \"./components/Wrapper\";\nimport Score from \"./components/Score\";\nimport Title from \"./components/Title\";\nimport friends from \"./friends.json\";\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      friends,\n      score: 0,\n      highScore: 0,\n      modelsClicked: [0],\n      title: \"Click any fierce face to start\"\n    };\n\n    this.cardClicked = id => {\n      if (this.state.modelsClicked.indexOf(id) === -1) {\n        // if id user clicked is not included in ourr arr, \n        // update arr\n        this.setState({\n          modelsClicked: this.state.modelsClicked.concat(id),\n          title: \"You wanna be on top?\"\n        }); // call correctClick function\n\n        this.correctClick();\n      } else {\n        this.incorrectClick();\n      }\n    };\n\n    this.correctClick = () => {\n      // update our score\n      var newScore = this.state.score + 1;\n      this.setState({\n        friends: this.shuffleCards(friends),\n        score: newScore\n      });\n    };\n\n    this.incorrectClick = () => {\n      // reset score to 0\n      this.setState({\n        score: 0,\n        modelsClicked: [0],\n        title: \"Unfortunately, your booty is lacking the tooch\",\n        friends: friends\n      }); // prompt user to play again\n\n      setTimeout(function () {\n        this.setState({\n          title: \"Click a model to start again\"\n        }).bind(this);\n      }, 5000);\n    };\n\n    this.shuffleCards = friends => {\n      for (let i = friends.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        var _ref = [friends[j], friends[i]];\n        friends[i] = _ref[0];\n        friends[j] = _ref[1];\n      }\n\n      return friends;\n    };\n  }\n\n  // Map over this.state.friends and render a FriendCard component for each friend object\n  render() {\n    return React.createElement(Wrapper, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, React.createElement(Title, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, this.state.title), React.createElement(Score, {\n      score: this.state.score,\n      highScore: this.state.highScore,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }), this.state.friends.map(friend => React.createElement(FriendCard, {\n      cardClicked: this.cardClicked,\n      id: friend.id,\n      key: friend.id,\n      name: friend.name,\n      image: friend.image,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/sarahmaples/Desktop/bootcamp/homework/clicky-game/src/App.js"],"names":["React","Component","FriendCard","Wrapper","Score","Title","friends","App","state","score","highScore","modelsClicked","title","cardClicked","id","indexOf","setState","concat","correctClick","incorrectClick","newScore","shuffleCards","setTimeout","bind","i","length","j","Math","floor","random","render","map","friend","name","image"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport FriendCard from \"./components/FriendCard\";\nimport Wrapper from \"./components/Wrapper\";\nimport Score from \"./components/Score\";\nimport Title from \"./components/Title\";\nimport friends from \"./friends.json\";\n\nclass App extends Component {\n  // Setting this.state.friends to the friends json array\n  state = {\n    friends,\n    score: 0,\n    highScore: 0,\n    modelsClicked: [0],\n    title: \"Click any fierce face to start\"\n  };\n  \n  cardClicked = id => {\n    if (this.state.modelsClicked.indexOf(id) === -1){\n      // if id user clicked is not included in ourr arr, \n      // update arr\n      this.setState({ \n        modelsClicked: this.state.modelsClicked.concat(id), \n        title: \"You wanna be on top?\"\n      });\n      // call correctClick function\n      this.correctClick();\n    } else {\n      this.incorrectClick();\n    }\n  }\n\n  correctClick = () => {\n    // update our score\n    var newScore = this.state.score + 1;\n    this.setState({\n      friends: this.shuffleCards(friends),\n      score: newScore\n    });\n  }\n\n  incorrectClick = () => {\n    // reset score to 0\n    this.setState({\n      score: 0,\n      modelsClicked: [0],\n      title: \"Unfortunately, your booty is lacking the tooch\",\n      friends: friends\n    });\n    // prompt user to play again\n    setTimeout(function(){\n      this.setState({\n        title: \"Click a model to start again\"\n      }).bind(this)\n    }, 5000)\n  }\n\n  shuffleCards = (friends) => {\n    for (let i = friends.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [friends[i], friends[j]] = [friends[j], friends[i]];\n    }\n    return friends;\n  } \n\n  // Map over this.state.friends and render a FriendCard component for each friend object\n  render() {\n    return (\n      <Wrapper>\n        <Title>{this.state.title}</Title>\n        <Score\n          score={this.state.score}\n          highScore={this.state.highScore} />\n        {this.state.friends.map(friend => (\n          <FriendCard\n            cardClicked={this.cardClicked}\n            id={friend.id}\n            key={friend.id}\n            name={friend.name}\n            image={friend.image}\n          />\n        ))}\n      </Wrapper>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}